{"version":3,"sources":["Circle.js","serviceWorker.js","index.js"],"names":["Circle","state","currentSong","refreshToken","songData","onLogin","axios","get","then","response","window","location","assign","data","Cookies","this","getCurrentTrack","interval","setInterval","setState","console","log","clearInterval","className","onClick","Component","AnimateCircle","current_song_title","mood","danceability","energy","SunCircle","MoonCircle","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SAKMA,E,4MAEJC,MAAQ,CACNC,YAAa,KACbC,aAAc,GACdC,SAAU,I,EA4BZC,QAAU,WACRC,IAAMC,IAAI,UAAUC,MAAK,SAAAC,GACvBC,OAAOC,SAASC,OAAOH,EAASI,U,kEA3Bf,IAAD,OACZV,EAAeW,IAAQP,IAAI,yBAC7BJ,IACFY,KAAKC,gBAAgBb,GACrBY,KAAKE,SAAWC,aAAY,WAC1B,EAAKF,gBAAgBb,KACpB,Q,sCAISA,GAAe,IAAD,OAC5BG,IAAMC,IAAI,kBAAkBC,MAAK,SAAAC,GAC/B,EAAKU,SAAS,CAAChB,aAAcA,IAC7B,IAAMC,EAAWK,EAASI,KAC1B,EAAKM,SAAS,CAACf,SAAUA,IACzBgB,QAAQC,IAAIZ,EAASI,W,6CAKnBE,KAAKE,UACPK,cAAcP,KAAKE,Y,+BAWrB,OACGF,KAAKd,MAAME,aAOZ,kBAAC,EAAD,CAAeC,SAAUW,KAAKd,MAAMG,WANpC,yBAAKmB,UAAU,SACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,cAAd,qGACA,4BAAQA,UAAU,qBAAqBC,QAAST,KAAKV,SAArD,qB,GA7CWoB,aAqDfC,EAAgB,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAChBF,EAAcE,EAASuB,mBAC7B,IAAKzB,EACH,OACE,yBAAKqB,UAAU,qBACb,wBAAIA,UAAU,oBAAd,+CAKN,IAAIK,EAAO,EAIX,OAHIxB,EAASyB,cAAgB,IAAMzB,EAAS0B,QAAU,MACpDF,EAAO,GAGE,IAATA,EAAa,kBAAC,EAAD,CAAW1B,YAAaA,IAAiB,kBAAC,EAAD,CAAYA,YAAaA,KAI7E6B,EAAY,SAAC,GAAD,IAAE7B,EAAF,EAAEA,YAAF,OACd,yBAAKqB,UAAU,qBACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,WACf,uBAAGA,UAAU,YAAb,sBAA4CrB,KAI5C8B,EAAa,SAAC,GAAD,IAAE9B,EAAF,EAAEA,YAAF,OACf,yBAAKqB,UAAU,oBACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,WACf,uBAAGA,UAAU,aAAb,sBAA6CrB,KAGpCF,IClFKiC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.a9cdb4a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Cookies from 'js-cookie';\nimport './Circle.css';\nimport axios from 'axios';\n\nclass Circle extends Component {\n\n  state = {\n    currentSong: null,\n    refreshToken: \"\",\n    songData: {}\n  }\n\n  componentDidMount() {\n    const refreshToken = Cookies.get('SPOTIFY_REFRESH_TOKEN')\n    if (refreshToken) {\n      this.getCurrentTrack(refreshToken)\n      this.interval = setInterval(() => {\n        this.getCurrentTrack(refreshToken)\n      }, 8000);\n    }\n  }\n\n  getCurrentTrack(refreshToken) {\n    axios.get('/current_track').then(response => {\n      this.setState({refreshToken: refreshToken})\n      const songData = response.data\n      this.setState({songData: songData})\n      console.log(response.data)\n    })\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  onLogin = () => {\n    axios.get('/login').then(response => {\n      window.location.assign(response.data)\n    });\n  }\n\n  render() {\n    return (\n      !this.state.refreshToken ?\n      <div className=\"scene\">\n        <div className=\"scene-description\">\n          <h3 className=\"login-text\">Log into your Spotify account to render a scene based off of what you are currently listening to.</h3>\n          <button className=\"get-started-button\" onClick={this.onLogin}>Get started</button>\n        </div>\n      </div> :\n      <AnimateCircle songData={this.state.songData}/>\n    );\n  }\n}\n\nconst AnimateCircle = ({songData}) => {\n  const currentSong = songData.current_song_title\n  if (!currentSong) {\n    return (\n      <div className=\"scene empty-scene\">\n        <h2 className=\"empty-scene-text\">Please start playing a song from Spotify!!</h2>\n      </div>\n\n    );\n  }\n  let mood = 0;\n  if (songData.danceability >= .5 && songData.energy >= .65) {\n    mood = 1;\n  }\n  return (\n    mood === 1 ? <SunCircle currentSong={currentSong}/> : <MoonCircle currentSong={currentSong}/>\n  )\n}\n\nconst SunCircle = ({currentSong}) => (\n    <div className=\"scene sunny-scene\">\n      <div className=\"clouds\"></div>\n      <div className=\"circle sun\"></div>\n      <div className=\"clouds\"></div>\n      <p className=\"sun-font\">Currently playing: {currentSong}</p>\n    </div>\n)\n\nconst MoonCircle = ({currentSong}) => (\n    <div className=\"scene moon-scene\">\n      <div className=\"clouds\"></div>\n      <div className=\"circle moon\"></div>\n      <div className=\"clouds\"></div>\n      <p className=\"moon-font\">Currently playing: {currentSong}</p>\n    </div>\n )\nexport default Circle;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Circle from './Circle';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Circle />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}